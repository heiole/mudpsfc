name: Mods Update Release

on:
  push:
    paths:
      - 'mods/**'  # Trigger workflow when any changes happen in the mods folder

permissions:
  contents: write  # Explicitly allow write access to the contents (needed for creating releases)

jobs:
  release-modpack:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Time Zone and Extract Commit Hash
        run: |
          export TZ="Europe/Warsaw"
          commit_hash=$(git rev-parse --short HEAD)
          echo "commit_hash=$commit_hash" >> $GITHUB_ENV

      - name: Zip Mods Directory
        run: |
          export TZ="Europe/Warsaw"
          timestamp=$(date +"%d.%m.%Y")
          echo "timestamp=$timestamp" >> $GITHUB_ENV
          zip -r -3 mods_$timestamp.zip mods

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ env.timestamp }}-${{ env.commit_hash }}"
          release_name: "Mods Update - ${{ env.timestamp }} - ${{ env.commit_hash }}"
          draft: false
          prerelease: false
          body: |
            i ❤️ kenny and ye

      - name: Upload Mods Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: mods_${{ env.timestamp }}.zip
          asset_name: mods_${{ env.timestamp }}.zip
          asset_content_type: application/zip

  syncthing-file-management:
    runs-on: ubuntu-latest
    needs: release-modpack
    steps:
      - name: Install Curl
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Detect Changes in Mods Folder
        id: detect_changes
        run: |
          # List added/modified .jar files
          git diff --name-status HEAD^ HEAD | grep '^A\|^M' | grep 'mods/.*\.jar$' | awk '{print $2}' > added_or_modified_files.txt
          
          # List deleted .jar files
          git diff --name-status HEAD^ HEAD | grep '^D' | grep 'mods/.*\.jar$' | awk '{print $2}' > deleted_files.txt
          
          echo "Added or modified files:"
          cat added_or_modified_files.txt
          
          echo "Deleted files:"
          cat deleted_files.txt

      - name: Upload New or Modified Files to Syncthing
        if: success()
        env:
          SYNCTHING_URL: ${{ env.DCKR_ST_URL }}
          SYNCTHING_API_KEY: ${{ secrets.DCKR_ST_API }}
          SYNCTHING_FOLDER_ID: mso6r-gpe5e
        run: |
          while read file; do
            if [ -f "$file" ]; then
              echo "Uploading $file to Syncthing..."
              curl -X POST "$SYNCTHING_URL/rest/db/file?folder=${SYNCTHING_FOLDER_ID}&file=$(basename $file)" \
                -H "X-API-Key: $SYNCTHING_API_KEY" \
                -F "file=@$file"
            fi
          done < added_or_modified_files.txt

      - name: Delete Removed Files from Syncthing
        if: success()
        env:
          SYNCTHING_URL: ${{ env.DCKR_ST_URL }}
          SYNCTHING_API_KEY: ${{ secrets.DCKR_ST_API }}
          SYNCTHING_FOLDER_ID: mso6r-gpe5e
        run: |
          while read file; do
            echo "Deleting $file from Syncthing..."
            curl -X DELETE "$SYNCTHING_URL/rest/db/file?folder=${SYNCTHING_FOLDER_ID}&file=$(basename $file)" \
              -H "X-API-Key: $SYNCTHING_API_KEY"
          done < deleted_files.txt
